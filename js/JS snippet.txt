## 배열 내 모든 값에 대하여 function을 실행시킨 return값들으로 구성된 배열을 리턴
let allNum = array.map(x => {return x + 1});
## 배열 내 모든 값에 대하여 true인 값만으로 배열을 새로 구성해 반환. ## array.reject는 array.filter와 정확하게 동작. 이것은 내장메소드가 아니라서 lodash등을 사용해야함.
## 빈 원소 제거를 해야 할 때에도 filter메소드 사용 가능.
let oddNum = array.filter(x => {return x%2 != 0});
## 배열내의 벨류 모두가 true이면 true반환
let ev = array.every(x => {return x==0});
## 배열내 일부가 true이면 true반환
let sm = array.some(x => {return x==0});

## every와 some은 반환값이 결정되면 순회 중지.

###Map오브젝트 ## K-V store, java beans와 비슷

let me = new Map();
me.set('name', 'May');
me.set('age', 30);
console.log(me.get('name')); // "May"
// 대괄호를 사용해서 map 을 선언하는 방법
const roomTypeMap = new Map(
  [
    ["01", "원룸(오픈형)"],
    ["02", "원룸(분리형)"],
    ["03", "원룸(복층형)"],
    ["04", "투룸"],
    ["05", "쓰리룸"]
  ]
);
// 새로운 map 을 만들고 그 데이터를 기존의 [key, value] 페어컬렉션으로 채움
let you = new Map().set('name', 'paul').set('age', 34);
console.log(you.get('name')); // 'paul'
// has(): 주어진 key 가 존재하는지 확인
console.log(me.has('name')); // true
// size: map 에 담겨진 엔트리의 개수를 조회
console.log(you.size); // 2
// delete(): 엔트리를 삭제
me.delete('age');
console.log(me.has('age')); // false
// clear(): 모든 엔트리를 삭제
you.clear();
console.log(you.size); // 0

###Set 오브젝트
// 비어있는 새로운 set 을 만듬
let setA = new Set();
// 새로운 set 을 만들고 인자로 전달된 iterable 로 인자를 채움
let setB = new Set().add('a').add('b');
setB.add('c');
console.log(setB.size); // 3
// has(): 주어진 값이 set 안에 존재할 경우, true 를 반환
// indexOf() 보다 빠름. 단, index 가 없음
console.log(setB.has('b')); // true
// set 에서 주어진 값을 제거
setB.delete('b');
console.log(setB.has('b')); // false
// set 안의 모든 데이터를 제거
setB.clear();
console.log(setB.size); // 0


spread연산자
// string == iterable object
console.log([...'music']); // ['m', 'u', 's', 'i', 'c']


let me = new Map().set('a', 1).set('b', 2);
console.log([...me.keys()]); // ['a', 'b']
console.log([...me.values()]); // [1, 2]


### map.entries(), map.next()
### map 안의 모든 엔트리들을 순회할 수 있는 iterable object 를 반환

let you = new Map().set('Seoul', 28).set('Tokyo', 26);
let iterObj = you.entries();
console.log(iterObj.next()); // {value: ['Seoul', 28], done: false}
console.log(iterObj.next()); // {value: ['Tokyo', 26], done: false}
console.log(iterObj.next()); // {value: undefined, done: true}